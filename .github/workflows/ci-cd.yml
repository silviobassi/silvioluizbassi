name: CI/CD Pipeline for app-course

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Etapa 1: Checkout do código
      - name: Check out code
        uses: actions/checkout@v4

      # Etapa 5: Criação da imagem Docker
      - name: Build Docker image
        run: |
          docker build -t silviobassi/app-course:1.0.0 .

      # Etapa 6: Autenticação no Docker Hub
      - name: Docker login
        run: |
          echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

      # Etapa 7: Enviar imagem para o Docker Hub
      - name: Push Docker image to Docker Hub
        run: |
          docker push silviobassi/app-course:1.0.0

      # Etapa 3: Configurar kubectl para o cluster EKS
      - name: Configure kubectl for EKS
        run: |
          aws eks --region us-east-2 update-kubeconfig --name infnet-eks-cluster

      # Etapa 2: Configuração das credenciais AWS
      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: 'us-east-2' # Ajuste para sua região

      - name: Install Prometheus and Grafana
        run: |
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo update
          helm upgrade --install prometheus prometheus-community/kube-prometheus-stack \
            --namespace infnet-monitoring --create-namespace \
            --set adminUser=infnet \
            --set adminPassword=infnet \
            --set grafana.persistence.enabled=true \
            --set grafana.persistence.size=5Gi \
            --set prometheus.server.persistentVolume.enabled=true \
            --set prometheus.server.persistentVolume.size=10Gi \
            --set grafana.service.type=LoadBalancer \
            --values values.yaml

      - name: Create namespaces
        run: |
          kubectl create namespace infnet-app || true

      # Etapa 8: Aplicar manifestos do Kubernetes
      - name: Apply MySQL deployment
        run: |
          kubectl apply -f mysql-deployment.yml
      - name: Apply app deployment
        run: |
          kubectl apply -f app-deployment.yml